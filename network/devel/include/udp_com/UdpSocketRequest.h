// Generated by gencpp from file udp_com/UdpSocketRequest.msg
// DO NOT EDIT!


#ifndef UDP_COM_MESSAGE_UDPSOCKETREQUEST_H
#define UDP_COM_MESSAGE_UDPSOCKETREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace udp_com
{
template <class ContainerAllocator>
struct UdpSocketRequest_
{
  typedef UdpSocketRequest_<ContainerAllocator> Type;

  UdpSocketRequest_()
    : srcAddress()
    , destAddress()
    , port(0)
    , isMulticast(false)  {
    }
  UdpSocketRequest_(const ContainerAllocator& _alloc)
    : srcAddress(_alloc)
    , destAddress(_alloc)
    , port(0)
    , isMulticast(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _srcAddress_type;
  _srcAddress_type srcAddress;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _destAddress_type;
  _destAddress_type destAddress;

   typedef uint16_t _port_type;
  _port_type port;

   typedef uint8_t _isMulticast_type;
  _isMulticast_type isMulticast;





  typedef boost::shared_ptr< ::udp_com::UdpSocketRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udp_com::UdpSocketRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UdpSocketRequest_

typedef ::udp_com::UdpSocketRequest_<std::allocator<void> > UdpSocketRequest;

typedef boost::shared_ptr< ::udp_com::UdpSocketRequest > UdpSocketRequestPtr;
typedef boost::shared_ptr< ::udp_com::UdpSocketRequest const> UdpSocketRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::udp_com::UdpSocketRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::udp_com::UdpSocketRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::udp_com::UdpSocketRequest_<ContainerAllocator1> & lhs, const ::udp_com::UdpSocketRequest_<ContainerAllocator2> & rhs)
{
  return lhs.srcAddress == rhs.srcAddress &&
    lhs.destAddress == rhs.destAddress &&
    lhs.port == rhs.port &&
    lhs.isMulticast == rhs.isMulticast;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::udp_com::UdpSocketRequest_<ContainerAllocator1> & lhs, const ::udp_com::UdpSocketRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace udp_com

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::udp_com::UdpSocketRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::udp_com::UdpSocketRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp_com::UdpSocketRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp_com::UdpSocketRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp_com::UdpSocketRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp_com::UdpSocketRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::udp_com::UdpSocketRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5363341da98ddf2ad017614cf3d85382";
  }

  static const char* value(const ::udp_com::UdpSocketRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5363341da98ddf2aULL;
  static const uint64_t static_value2 = 0xd017614cf3d85382ULL;
};

template<class ContainerAllocator>
struct DataType< ::udp_com::UdpSocketRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "udp_com/UdpSocketRequest";
  }

  static const char* value(const ::udp_com::UdpSocketRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::udp_com::UdpSocketRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string srcAddress\n"
"string destAddress\n"
"uint16 port\n"
"bool isMulticast\n"
;
  }

  static const char* value(const ::udp_com::UdpSocketRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::udp_com::UdpSocketRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.srcAddress);
      stream.next(m.destAddress);
      stream.next(m.port);
      stream.next(m.isMulticast);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UdpSocketRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::udp_com::UdpSocketRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::udp_com::UdpSocketRequest_<ContainerAllocator>& v)
  {
    s << indent << "srcAddress: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.srcAddress);
    s << indent << "destAddress: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.destAddress);
    s << indent << "port: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.port);
    s << indent << "isMulticast: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isMulticast);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UDP_COM_MESSAGE_UDPSOCKETREQUEST_H

// Generated by gencpp from file udp_com/UdpSendResponse.msg
// DO NOT EDIT!


#ifndef UDP_COM_MESSAGE_UDPSENDRESPONSE_H
#define UDP_COM_MESSAGE_UDPSENDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace udp_com
{
template <class ContainerAllocator>
struct UdpSendResponse_
{
  typedef UdpSendResponse_<ContainerAllocator> Type;

  UdpSendResponse_()
    : sent(false)
    , socketCreated(false)  {
    }
  UdpSendResponse_(const ContainerAllocator& _alloc)
    : sent(false)
    , socketCreated(false)  {
  (void)_alloc;
    }



   typedef uint8_t _sent_type;
  _sent_type sent;

   typedef uint8_t _socketCreated_type;
  _socketCreated_type socketCreated;





  typedef boost::shared_ptr< ::udp_com::UdpSendResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udp_com::UdpSendResponse_<ContainerAllocator> const> ConstPtr;

}; // struct UdpSendResponse_

typedef ::udp_com::UdpSendResponse_<std::allocator<void> > UdpSendResponse;

typedef boost::shared_ptr< ::udp_com::UdpSendResponse > UdpSendResponsePtr;
typedef boost::shared_ptr< ::udp_com::UdpSendResponse const> UdpSendResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::udp_com::UdpSendResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::udp_com::UdpSendResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::udp_com::UdpSendResponse_<ContainerAllocator1> & lhs, const ::udp_com::UdpSendResponse_<ContainerAllocator2> & rhs)
{
  return lhs.sent == rhs.sent &&
    lhs.socketCreated == rhs.socketCreated;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::udp_com::UdpSendResponse_<ContainerAllocator1> & lhs, const ::udp_com::UdpSendResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace udp_com

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::udp_com::UdpSendResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::udp_com::UdpSendResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp_com::UdpSendResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp_com::UdpSendResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp_com::UdpSendResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp_com::UdpSendResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::udp_com::UdpSendResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bf1b3abebee64fbcca21c0ec4f34edf";
  }

  static const char* value(const ::udp_com::UdpSendResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bf1b3abebee64fbULL;
  static const uint64_t static_value2 = 0xcca21c0ec4f34edfULL;
};

template<class ContainerAllocator>
struct DataType< ::udp_com::UdpSendResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "udp_com/UdpSendResponse";
  }

  static const char* value(const ::udp_com::UdpSendResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::udp_com::UdpSendResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool sent\n"
"bool socketCreated\n"
"\n"
;
  }

  static const char* value(const ::udp_com::UdpSendResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::udp_com::UdpSendResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sent);
      stream.next(m.socketCreated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UdpSendResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::udp_com::UdpSendResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::udp_com::UdpSendResponse_<ContainerAllocator>& v)
  {
    s << indent << "sent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sent);
    s << indent << "socketCreated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.socketCreated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UDP_COM_MESSAGE_UDPSENDRESPONSE_H

// Generated by gencpp from file udp_com/UdpSendRequest.msg
// DO NOT EDIT!


#ifndef UDP_COM_MESSAGE_UDPSENDREQUEST_H
#define UDP_COM_MESSAGE_UDPSENDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace udp_com
{
template <class ContainerAllocator>
struct UdpSendRequest_
{
  typedef UdpSendRequest_<ContainerAllocator> Type;

  UdpSendRequest_()
    : address()
    , srcPort(0)
    , dstPort(0)
    , data()  {
    }
  UdpSendRequest_(const ContainerAllocator& _alloc)
    : address(_alloc)
    , srcPort(0)
    , dstPort(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _address_type;
  _address_type address;

   typedef uint16_t _srcPort_type;
  _srcPort_type srcPort;

   typedef uint16_t _dstPort_type;
  _dstPort_type dstPort;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::udp_com::UdpSendRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udp_com::UdpSendRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UdpSendRequest_

typedef ::udp_com::UdpSendRequest_<std::allocator<void> > UdpSendRequest;

typedef boost::shared_ptr< ::udp_com::UdpSendRequest > UdpSendRequestPtr;
typedef boost::shared_ptr< ::udp_com::UdpSendRequest const> UdpSendRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::udp_com::UdpSendRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::udp_com::UdpSendRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::udp_com::UdpSendRequest_<ContainerAllocator1> & lhs, const ::udp_com::UdpSendRequest_<ContainerAllocator2> & rhs)
{
  return lhs.address == rhs.address &&
    lhs.srcPort == rhs.srcPort &&
    lhs.dstPort == rhs.dstPort &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::udp_com::UdpSendRequest_<ContainerAllocator1> & lhs, const ::udp_com::UdpSendRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace udp_com

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::udp_com::UdpSendRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::udp_com::UdpSendRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp_com::UdpSendRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp_com::UdpSendRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp_com::UdpSendRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp_com::UdpSendRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::udp_com::UdpSendRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25050f5ee323eed83d8e29a73150d3a2";
  }

  static const char* value(const ::udp_com::UdpSendRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25050f5ee323eed8ULL;
  static const uint64_t static_value2 = 0x3d8e29a73150d3a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::udp_com::UdpSendRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "udp_com/UdpSendRequest";
  }

  static const char* value(const ::udp_com::UdpSendRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::udp_com::UdpSendRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string address\n"
"uint16 srcPort\n"
"uint16 dstPort\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::udp_com::UdpSendRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::udp_com::UdpSendRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.address);
      stream.next(m.srcPort);
      stream.next(m.dstPort);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UdpSendRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::udp_com::UdpSendRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::udp_com::UdpSendRequest_<ContainerAllocator>& v)
  {
    s << indent << "address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.address);
    s << indent << "srcPort: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.srcPort);
    s << indent << "dstPort: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dstPort);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UDP_COM_MESSAGE_UDPSENDREQUEST_H
